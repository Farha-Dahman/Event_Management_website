@page "{eventId:int}"
@model EventManagement_Application.Pages.Organizer.Tickets.CreateModel
@{
    ViewData["Title"] = "Create Tickets";
}
<style>
    /* General Styling */
    .ticket-form-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .ticket-form-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
        margin-bottom: 20px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

        .form-group label {
            font-weight: bold;
            color: #333;
        }

    .form-control {
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 14px;
    }

        .form-control:focus {
            border-color: #007bff;
            outline: none;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
        }

    .text-danger {
        color: #dc3545;
        font-size: 12px;
    }

    /* Button Styling */
    .form-buttons {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
    }

    .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

        .btn-success:hover {
            background-color: #218838;
        }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

</style>

<h2 class="text-center clr-text my-3">Create Tickets for Your Event</h2>

<form method="post" class="ticket-form-container">
    <!-- Hidden input to bind the EventId to the Ticket -->
    <input type="hidden" asp-for="Ticket.EventId" />

    <div class="ticket-form-grid">
        <!-- Price Section -->
        <div class="form-group price-section">
            <label asp-for="Ticket.Price">Ticket Price</label>
            <input asp-for="Ticket.Price" class="form-control price-input" type="number" step="0.01" min="0" value="@Model.Ticket.Price" oninput="updateTicketType()" />
            <span asp-validation-for="Ticket.Price" class="text-danger"></span>
        </div>

        <!-- Ticket Type Section -->
        <div class="form-group ticket-type-section">
            <label asp-for="Ticket.TicketType">Ticket Type</label>
            <input asp-for="Ticket.TicketType" class="form-control ticket-type-input" readonly="readonly" value="@Model.Ticket.TicketType" />
            <span asp-validation-for="Ticket.TicketType" class="text-danger"></span>
        </div>

        <!-- Quantity Section -->
        <div class="form-group quantity-section">
            <label asp-for="Ticket.Quantity">Quantity</label>
            <input asp-for="Ticket.Quantity" class="form-control quantity-input" type="number" min="1" placeholder="Enter Quantity" required value="@Model.Ticket.Quantity" />
            <span asp-validation-for="Ticket.Quantity" class="text-danger"></span>
        </div>

        <!-- Available Tickets Section -->
        <div class="form-group available-tickets-section">
            <label asp-for="Ticket.AvailableTickets">Available Seats</label>
            <input asp-for="Ticket.AvailableTickets" class="form-control quantity-input" type="number" min="1" placeholder="Enter Available Seats" required value="@Model.Ticket.AvailableTickets" />
            <span asp-validation-for="Ticket.AvailableTickets" class="text-danger"></span>
        </div>

        <div class="form-group open-date-section">
            <label asp-for="Ticket.OpenDate">Open Date</label>
            <input asp-for="Ticket.OpenDate" id="openDate" class="form-control" type="datetime-local" />
            <span id="openDateError" class="text-danger" style="display: none;">Sale Start Date cannot be later than Sale End Date.</span>
        </div>

        <div class="form-group close-date-section">
            <label asp-for="Ticket.CloseDate">Close Date</label>
            <input asp-for="Ticket.CloseDate" id="closeDate" class="form-control" type="datetime-local" />
            <span asp-validation-for="Ticket.CloseDate" class="text-danger"></span>
        </div>
    </div>

    <!-- Buttons Section -->
    <div class="form-buttons">
        <button type="submit" class="btn bg-primary-color text-white">Create Ticket</button>
        <a asp-page="./Events/Details" asp-route-id="@Model.Event.Id" class="btn btn-secondary">Back to Event</a>
    </div>
</form>

<script>
    // Update ticket type based on the price value
    function updateTicketType() {
        let priceInput = document.querySelector('.price-input');
        let ticketTypeInput = document.querySelector('.ticket-type-input');

        if (parseFloat(priceInput.value) === 0) {
            ticketTypeInput.value = "Free";
            ticketTypeInput.setAttribute("readonly", "readonly");
        } else {
            ticketTypeInput.removeAttribute("readonly");
            ticketTypeInput.value = "";
            ticketTypeInput.placeholder = "Enter Your Ticket Type...";
        }
    }

    document.addEventListener("DOMContentLoaded", function () {
        updateTicketType();

        const openDateInput = document.getElementById('openDate');
        const closeDateInput = document.getElementById('closeDate');
        const openDateError = document.getElementById('openDateError');

        // Set the default close date to today
        const today = new Date().toISOString().slice(0, 16); // Get current date and time in ISO format
        closeDateInput.value = today;

        // Validate date range when either input changes
        openDateInput.addEventListener('change', validateDateRange);
        closeDateInput.addEventListener('change', validateDateRange);

        function validateDateRange() {
            const openDate = new Date(openDateInput.value);
            const closeDate = new Date(closeDateInput.value);

            // Reset error messages
            openDateError.style.display = 'none';

            if (openDate && closeDate) {
                if (openDate > closeDate) {
                    openDateError.style.display = 'block';
                    openDateInput.setCustomValidity("Invalid date range.");
                } else {
                    openDateInput.setCustomValidity("");
                }
            }
        }
    });
</script>