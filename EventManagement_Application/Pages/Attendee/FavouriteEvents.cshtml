@page
@model EventManagement_Application.Pages.Attendee.FavouriteEventsModel
@{
    ViewData["Title"] = "Favorite Events";
}

@Html.AntiForgeryToken()

<style>
    .event-card {
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .card-body {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }

    .card-text {
        flex-grow: 1;
        overflow: hidden;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        text-overflow: ellipsis;
    }

    .card-img-top {
        height: 200px;
        object-fit: cover;
    }
</style>

<div class="container mt-3">
    <h2 class="text-start clr-text py-3 mb-2">Your Favorite Events</h2>

    <!-- Events Grid -->
    <div class="row">
        @foreach (var eventItem in Model.FavoriteEvents)
        {
            <div class="col-md-6 col-lg-3 mb-4">
                <div class="card shadow-sm event-card text-decoration-none position-relative"
                     onclick="goToEventDetails('@eventItem.Id')"
                     style="cursor: pointer;">
                    <div class="image-container position-relative">
                        @if (eventItem.EventImage != null)
                        {
                            <img src="data:image/png;base64,@Convert.ToBase64String(eventItem.EventImage)" alt="Event Image" class="card-img-top" />
                        }
                        else
                        {
                            <img src="/images/no-image-available.jpg" alt="Default Event Image" class="card-img-top" />
                        }
                        <div class="position-absolute bottom-0 end-0 gap-2 p-2 btns">
                            <button class="favorite-btn rounded-circle me-2"
                                    onclick="toggleFavorite(event, '@eventItem.Id')">
                                <i id="favorite-icon-@eventItem.Id" class="fa-solid fa-heart event-icon p-3 rounded-circle"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">@eventItem.Title</h5>
                        <p class="card-text text-muted small">@eventItem.EventDate.ToString("MMMM dd, yyyy") - @eventItem.Location</p>
                        <p class="card-text">@eventItem.Description</p>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Pagination -->
    <div class="d-flex justify-content-center mt-4">
        <nav aria-label="Page navigation">
            <ul class="pagination">
                @if (Model.FavoriteEvents.HasPreviousPage)
                {
                    <li class="page-item">
                        <a class="page-link" href="?PageNumber=@(Model.FavoriteEvents.PageNumber - 1)" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                }
                @for (int i = 1; i <= Model.FavoriteEvents.PageCount; i++)
                {
                    <li class="page-item @(i == Model.FavoriteEvents.PageNumber ? "active" : "")">
                        <a class="page-link" href="?PageNumber=@i">@i</a>
                    </li>
                }
                @if (Model.FavoriteEvents.HasNextPage)
                {
                    <li class="page-item">
                        <a class="page-link" href="?PageNumber=@(Model.FavoriteEvents.PageNumber + 1)" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    </div>
</div>

<!-- Login Modal -->
<div class="modal fade" id="loginModal" tabindex="-1" aria-labelledby="loginModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="loginModalLabel">Login Required</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                You need to log in to add events to your favorites. Please log in and try again.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <a href="/Identity/Account/Login" class="btn btn-primary bg-primary-color">Log in</a>
            </div>
        </div>
    </div>
</div>

<script>
    function goToEventDetails(eventId) {
        window.location.href = '/Attendee/EventDetails?eventId=' + eventId;
    }

    function toggleFavorite(event, eventId) {
        event.stopPropagation(); // Prevent card click behavior

        fetch('/Attendee/ViewEvents?handler=ToggleFavorite', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ eventId: eventId }) // Make sure it matches the backend parameter
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                let icon = document.getElementById(`favorite-icon-${eventId}`);
                if (data.isFavorited) {
                    icon.classList.remove('fa-regular');
                    icon.classList.add('fa-solid');
                } else {
                    icon.classList.remove('fa-solid');
                    icon.classList.add('fa-regular');
                }
            } else {
                console.error("Failed to update favorite status:", data.message);
                if (data.message && data.message === "You need to log in to add events to favorites.") {
                    showLoginPopup(); // Show the popup
                }
            }
        })
        .catch(error => console.error("Error:", error));
    }

    function showLoginPopup() {
        // Show a modal or alert here
        const modal = new bootstrap.Modal(document.getElementById('loginModal'));
        modal.show();
    }
</script>