@page
@model EventManagement_Application.Pages.Attendee.ViewEventsModel
@{
    ViewData["Title"] = "All Events";
}

@Html.AntiForgeryToken()

<style>
    .event-card {
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .card-body {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }

    .card-text {
        flex-grow: 1;
        overflow: hidden;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        text-overflow: ellipsis;
    }

    .card-img-top {
        height: 200px;
        object-fit: cover;
    }
</style>

<div class="container mt-3">
    <h2 class="text-start py-3 mb-2">Upcoming Events</h2>

    <!-- Search and Filter Form -->
    <div class="border-1 search-form rounded-1 w-100 mb-4">
        <form method="get" class="mb-4 w-100 container">
            <div class="row g-3 justify-content-center align-items-end">
                <!-- Search by Title, Category, or Location -->
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-text bg-light border-end-0">
                            <i class="fa fa-search"></i>
                        </span>
                        <input type="text" name="SearchTerm" value="@Model.SearchTerm" class="form-control border-start-0" placeholder="Search by title, category, or location">
                    </div>
                </div>

                <!-- Search by Date -->
                <div class="col-md-3">
                    <div class="input-group">
                        <input type="date" name="SearchDate" value="@Model.SearchDate?.ToString("yyyy-MM-dd")" class="form-control">
                        <span class="input-group-text bg-light">
                            <i class="fa fa-calendar"></i>
                        </span>
                    </div>
                </div>

                <!-- Filter Button -->
                <div class="col-md-2">
                    <button type="button" class="btn btn-outline-secondary w-100" onclick="toggleFilters()">
                        <i class="fa-solid fa-filter me-2"></i>Filter
                    </button>
                </div>

                <!-- Search Button -->
                <div class="col-md-2">
                    <button type="submit" class="btn bg-primary-color text-white w-100">
                        <i class="fa fa-search me-2"></i>Search
                    </button>
                </div>
            </div>

            <!-- Filter Options (Initially Hidden) -->
            <div id="filterOptions" class="mt-3 p-4 border rounded bg-light" style="display: none;">
                <div class="row g-3">
                    <!-- Ticket Type Filter -->
                    <div class="col-md-6">
                        <label for="ticketType" class="form-label">Ticket Type</label>
                        <select id="ticketType" name="SelectedTicketType" class="form-select">
                            <option value="">Select Ticket Type</option>
                            @foreach (var ticketType in Model.TicketTypes)
                            {
                                <option value="@ticketType">@ticketType</option>
                            }
                        </select>
                    </div>

                    <!-- Event Mode Filter -->
                    <div class="col-md-6">
                        <label for="eventMode" class="form-label">Event Mode</label>
                        <select id="eventMode" name="SelectedMode" class="form-select">
                            <option value="">Select Event Mode</option>
                            <option value="Online">Online</option>
                            <option value="InPerson">In-person</option>
                        </select>
                    </div>

                    <!-- Done and Cancel Buttons -->
                    <div class="col-12 text-end">
                        <button type="submit" class="btn bg-primary-color text-white me-2">Apply Filters</button>
                        <button type="button" class="btn btn-secondary" onclick="resetFilters()">Reset Filters</button>
                    </div>
                </div>
            </div>
        </form>
    </div>
    <!-- Events Grid -->
    <div class="row">
        @foreach (var eventItem in Model.Events)
        {
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card shadow-sm event-card text-decoration-none position-relative"
                        onclick="goToEventDetails('@eventItem.Id')">
                    <div class="image-container position-relative">
                        @if (eventItem.EventImage != null)
                        {
                        <img src="data:image/png;base64,@Convert.ToBase64String(eventItem.EventImage)" alt="Event Image" class="card-img-top" />
                        }
                        else
                        {
                        <img src="/images/no-image-available.jpg" alt="Default Event Image" class="card-img-top" />
                        }
                        <div class="position-absolute bottom-0 end-0 gap-2 p-2 btns">
                            <button class="favorite-btn rounded-circle me-2"
                                    onclick="toggleFavorite(event, '@eventItem.Id')">
                                <i id="favorite-icon-@eventItem.Id" class="fa-@(@Model.FavoritedEventIds.Contains(eventItem.Id) ? "solid" : "regular") fa-heart event-icon p-3 rounded-circle"></i>
                            </button>
                            <button type="button" class="scanner-btn rounded-circle me-2" onclick="generateQRCode(event, '@eventItem.Id')">
                                <i class="fa-solid fa-qrcode event-icon p-3 rounded-circle"></i>
                            </button>
                            <button class="share-btn rounded-circle" onclick="redirectToMain(event)">
                                <i class="fas fa-share event-icon p-3 rounded-circle"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">@eventItem.Title</h5>
                        <p class="card-text text-muted small">@eventItem.EventDate.ToString("MMMM dd, yyyy") - @eventItem.Location</p>
                        <p class="card-text">@eventItem.Description</p>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Pagination -->
    <div class="d-flex justify-content-center mt-4">
        <nav aria-label="Page navigation">
            <ul class="pagination">
                @if (Model.Events.HasPreviousPage)
                {
                    <li class="page-item">
                        <a class="page-link" href="?PageNumber=@(Model.Events.PageNumber - 1)&SearchTerm=@Model.SearchTerm&SelectedCategory=@Model.SelectedCategory&SelectedMode=@Model.SelectedMode&SearchDate=@Model.SearchDate?.ToString("yyyy-MM-dd")&SelectedTicketType=@Model.SelectedTicketType" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                }
                @for (int i = 1; i <= Model.Events.PageCount; i++)
                {
                    <li class="page-item @(i == Model.Events.PageNumber ? "active" : "")">
                        <a class="page-link" href="?PageNumber=@i&SearchTerm=@Model.SearchTerm&SelectedCategory=@Model.SelectedCategory&SelectedMode=@Model.SelectedMode&SearchDate=@Model.SearchDate?.ToString("yyyy-MM-dd")&SelectedTicketType=@Model.SelectedTicketType">@i</a>
                    </li>
                }
                @if (Model.Events.HasNextPage)
                {
                    <li class="page-item">
                        <a class="page-link" href="?PageNumber=@(Model.Events.PageNumber + 1)&SearchTerm=@Model.SearchTerm&SelectedCategory=@Model.SelectedCategory&SelectedMode=@Model.SelectedMode&SearchDate=@Model.SearchDate?.ToString("yyyy-MM-dd")&SelectedTicketType=@Model.SelectedTicketType" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    </div>
</div>
<!-- Login Modal -->
<div class="modal fade" id="loginModal" tabindex="-1" aria-labelledby="loginModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="loginModalLabel">Login Required</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                You need to log in to add events to your favorites. Please log in and try again.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <a href="/Identity/Account/Login" class="btn btn-primary bg-primary-color">Log in</a>
            </div>
        </div>
    </div>
</div>

<!-- QR Code Modal -->
<div class="modal fade justify-content-center" id="qrCodeModal" tabindex="-1" aria-labelledby="qrCodeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content d-flex flex-column">
            <div class="modal-header">
                <h5 class="modal-title" id="qrCodeModalLabel">Scan QR Code</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center d-flex justify-content-center align-items-center">
                <div>
                    <div id="qrcode"></div>
                    <p class="mt-3">Scan this QR code to visit the event details page.</p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>

<script>
    function goToEventDetails(eventId) {
        window.location.href = '/Attendee/EventDetails?eventId=' + eventId;
    }

    function redirectToMain(event) {
        event.stopPropagation();
        window.location.href = '/';
    }

    function generateQRCode(event, eventId) {
        event.stopPropagation(); // Prevent card click

        // Clear previous QR code
        document.getElementById("qrcode").innerHTML = "";

        // Generate new QR code with proxy tracking page
        let qrLink = window.location.origin + "/Attendee/ScanEvent?eventId=" + eventId;
        new QRCode(document.getElementById("qrcode"), {
            text: qrLink,
            width: 200,
            height: 200,
        });

        // Open modal
        var qrCodeModal = new bootstrap.Modal(document.getElementById('qrCodeModal'));
        qrCodeModal.show();
    }


    function trackQRCodeScan(eventId) {
        console.log("Tracking QR code scan for event ID:", eventId); // Debugging

        // Send a POST request to the backend
        fetch('/Attendee/ViewEvents?handler=TrackQRCodeScan', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ eventId: eventId })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                console.log("QR scan tracked successfully. New count:", data.newCount);
            } else {
                console.error("Failed to track QR scan:", data);
            }
        })
        .catch(error => {
            console.error("Error tracking QR scan:", error);
        });
    }

    function toggleFavorite(event, eventId) {
        event.stopPropagation(); // Prevent card click behavior

        fetch('/Attendee/ViewEvents?handler=ToggleFavorite', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ eventId: eventId }) // Make sure it matches the backend parameter
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                let icon = document.getElementById(`favorite-icon-${eventId}`);
                if (data.isFavorited) {
                    icon.classList.remove('fa-regular');
                    icon.classList.add('fa-solid');
                } else {
                    icon.classList.remove('fa-solid');
                    icon.classList.add('fa-regular');
                }
            } else {
                console.error("Failed to update favorite status:", data.message);
                if (data.message && data.message === "You need to log in to add events to favorites.") {
                    showLoginPopup(); // Show the popup
                }
            }
        })
        .catch(error => console.error("Error:", error));
    }


    function showLoginPopup() {
        // Show a modal or alert here
        const modal = new bootstrap.Modal(document.getElementById('loginModal'));
        modal.show();
    }

    function toggleFilters() {
         const filterOptions = document.getElementById('filterOptions');
         filterOptions.style.display = filterOptions.style.display === 'none' ? 'block' : 'none';
     }

     function resetFilters() {
         document.getElementById('eventMode').value = '';
         document.getElementById('ticketType').value = '';
         document.querySelector('form').submit();
     }
</script>
